NeetCode 150 アルゴリズム概要
1. ハッシュテーブル
概要: キーと値のペアを格納するデータ構造で、効率的な検索・挿入・削除を実現します。
主な特徴:

平均時間複雑度 O(1) の操作
ハッシュ関数を使用してキーをインデックスに変換
衝突解決には開放アドレス法（線形探索、二次探索）やチェイン法がある
典型的な問題:
要素の出現頻度のカウント
値のペアの検索（例：2Sum問題）
文字列の検証（アナグラム判定など）

2. 配列とスライディングウィンドウ
概要: 配列上で「窓」を移動させながら部分配列に対する操作を行うテクニック。
主なパターン:

固定サイズウィンドウ：サイズkの連続した要素を処理
可変サイズウィンドウ：特定の条件を満たすまでウィンドウサイズを調整
典型的な問題:
最大/最小の部分配列の和
特定の条件を満たす最小/最大の部分配列
文字列中の最長の部分文字列（特定の条件を満たす）

3. 二分探索
概要: ソート済み配列で要素を効率的に検索するアルゴリズム。
主な特徴:

各ステップで探索範囲を半分に削減
時間複雑度は O(log n)
左・中央・右のポインタを使用
応用:
回転したソート配列での検索
近似値の検索
二分探索の概念を使用した「答えの二分探索」

4. スタックとキュー
スタック概要: LIFO（後入れ先出し）のデータ構造。
キュー概要: FIFO（先入れ先出し）のデータ構造。
主な操作:

スタック：プッシュ、ポップ、ピーク
キュー：エンキュー、デキュー、ピーク
典型的な問題:
括弧の検証
文字列の逆転
式の評価
グラフの探索（BFS、DFSの実装）

5. 双方向ポインタ
概要: 配列内の2つの位置を指す参照を同時に操作するテクニック。
主なパターン:

対向移動：配列の両端から中央へ
同方向移動：異なる速度で同じ方向に移動
窓の拡大縮小：条件に基づいて窓の大きさを調整
典型的な問題:
ソート済み配列での2Sum
容器に最も多くの水を入れる問題
トラッピングレインウォーター

6. 連結リスト
概要: データ要素が連続的なメモリではなくポインタでリンクされたデータ構造。
主な種類:

単方向連結リスト：各ノードに次のノードへのポインタ
双方向連結リスト：各ノードに前後のノードへのポインタ
循環連結リスト：最後のノードが最初のノードを指す
典型的な問題:
リストの逆転
環の検出
2つのリストの交差点
特定の位置からの要素の削除

7. 木とバイナリツリー
概要: 階層的データを表現するノードベースのデータ構造。
主な操作:

走査：前順（先行）、中順（間）、後順（後行）
挿入、削除、検索
典型的な問題:
二分探索木（BST）の検証
最小/最大深さの計算
対称性の確認
パスの合計

8. トライ（プレフィックスツリー）
概要: 文字列の集合を格納・検索するための木構造。
主な特徴:

各ノードは文字を表し、パスは文字列を形成
共通のプレフィックスを共有
文字列の検索が文字列長に比例（O(m)）
典型的な問題:
辞書内の単語検索
オートコンプリート
最長共通プレフィックス

9. ヒープ/優先度キュー
概要: 最大値または最小値を効率的に取得できる特殊な二分木。
主な特徴:

最大ヒープ：親ノードが子ノードより大きい
最小ヒープ：親ノードが子ノードより小さい
挿入と抽出の時間複雑度は O(log n)
典型的な問題:
k番目に大きい/小さい要素
メディアンの計算
マージソートされたリスト

10. バックトラッキング
概要: 再帰的に解を構築し、行き詰まったら戻って別の選択肢を試す問題解決手法。
主な特徴:

深さ優先探索の一形態
解が見つからなければ前のステップに戻る
組み合わせ問題によく使用される
典型的な問題:
N-Queensパズル
文字列の全排列
組み合わせの生成
数独の解法

11. グラフアルゴリズム
概要: 頂点と辺からなるグラフ構造上での問題解決手法。
主な探索アルゴリズム:

幅優先探索（BFS）：キューを使用し、レベルごとに探索
深さ優先探索（DFS）：スタックまたは再帰を使用し、可能な限り深く探索
典型的な問題:
連結成分の数
サイクルの検出
トポロジカルソーティング
最短経路問題

12. 動的プログラミング
概要: 問題を部分問題に分解し、結果を保存して重複計算を避ける最適化手法。
主なアプローチ:

トップダウン（メモ化再帰）
ボトムアップ（テーブル）
典型的な問題:
フィボナッチ数列
最長共通部分列（LCS）
ナップサック問題
コイン両替問題

13. グリーディアルゴリズム
概要: 各ステップで局所的に最適な選択を行う問題解決手法。
主な特徴:

現在の最善の選択を行う
過去の選択を再検討しない
必ずしも最適解を保証しない
典型的な問題:
活動選択問題
ハフマン符号化
最小スパニングツリー（クラスカル、プリム）

14. 区間問題
概要: 開始点と終了点で定義される区間に関する問題。
主な操作:

区間のソート（開始時間または終了時間で）
区間のマージ
重複区間の検出
典型的な問題:
重複区間のマージ
会議室のスケジューリング
区間の挿入

15. ビット操作
概要: データのビットレベルでの操作を活用するテクニック。
主な操作:

AND、OR、XOR、NOT
ビットのシフト（左、右）
ビットの設定・クリア・トグル
典型的な問題:
シングルナンバー（他の全ての数が2回現れる中で1回だけ現れる数）
ビットの数え上げ
2のべき乗の判定
バイナリ加算

16. 数学的アルゴリズム
概要: 数学的原理を応用して問題を解決する手法。
主な分野:

素数と因数分解
最大公約数と最小公倍数
組み合わせと順列
確率と期待値
典型的な問題:
素数判定
階乗の末尾ゼロ
パスカルの三角形
数学的パターンの発見